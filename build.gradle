// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.2.0-rc-39'
    repositories {
        jcenter()
        maven { url 'https://maven.google.com' }
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'http://dl.bintray.com/kotlin/kotlin-eap-1.2' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.0'
        classpath 'com.dicedmelon.gradle:jacoco-android:0.1.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.8.1'
        //noinspection GradleDynamicVersion
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

allprojects {
    repositories {
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url 'https://maven.google.com' }
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'http://dl.bintray.com/kotlin/kotlin-eap-1.2' }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

ext {
    // Sdk and tools
    minSdkVersion = 21
    targetSdkVersion = 27
    compileSdkVersion = 27
    buildToolsVersion = '27.0.0'

    // App dependencies
    ankoVersion = '0.9.1'
    commonsLangVersion = '3.5'
    crashlyticsVersion = '2.6.8'
    daggerVersion = '2.11'
    espressoVersion = '3.0.1'
    hamcrestVersion = '1.3'
    gsonVersion = '2.8.1'
    jodaVersion = '2.9.9'
    junitVersion = '4.12'
    mockitoKotlinVersion = '1.5.0'
    playServicesVersion = '11.4.2'
    retrofitVersion = '2.3.0'
    roomVersion = '1.0.0'
    rxAndroidVersion = '2.0.1'
    rxJavaVersion = '2.1.0'
    rulesVersion = '0.5'
    runnerVersion = '0.5'
    stethoVersion = '1.5.0'
    stickyHeadersVersion = '0.4.3@aar'
    supportLibraryVersion = '27.0.0'
    timberVersion = '4.5.1'
    uiAutomatorVersion = '2.1.1'
}

ext.getCurrentBranch = {
    def branch = System.getenv('TRAVIS_PULL_REQUEST_BRANCH')
    if (branch?.trim()) {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
            standardOutput = stdout
        }
        branch = stdout.toString().trim()
    }
    return branch
}

ext.gitCommitCount = {
    if(project.hasProperty('devBuild'))
        return 1

    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-list', '--count', 'HEAD'
        standardOutput = stdout
    }
    def commitCount = stdout.toString().trim().toInteger()
    return commitCount
}

ext.getVersionName = {
    if(project.hasProperty('devBuild'))
        return "dev"

    def branch = getCurrentBranch()

    def hasBranch = branch?.trim()

    if (!hasBranch) {
        return gitCommitCount()
    } else {
        return branch
    }
}
